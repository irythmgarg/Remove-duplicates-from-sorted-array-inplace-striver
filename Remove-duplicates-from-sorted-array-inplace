class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int i = 0;           // Pointer to track the position of the last unique element
        int n = nums.size(); // Get the size of the array
        int j = 1;           // Pointer to traverse the array

        // Handle the edge case of an empty array
        if (n < 1) {
            return 0; // Return 0 as there are no elements in the array
        }

        // Traverse the array starting from the second element
        for (int j = 1; j < n; j++) {
            // Check if the current element is different from the last unique element
            if (nums[j] != nums[i]) {
                i++;             // Move the unique element pointer
                nums[i] = nums[j]; // Overwrite the position with the new unique element
            }
        }

        // Return the count of unique elements (i + 1 since `i` is zero-based)
        return i + 1;
    }
};
