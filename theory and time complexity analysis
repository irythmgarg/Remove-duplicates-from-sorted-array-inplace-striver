Theory
Problem Statement:
The task is to remove duplicates from a sorted array in-place, i.e., without using extra space. The array should be modified so that each unique element appears only once, and the function should return the new length of the modified array.

Approach:

The input array is sorted, so duplicates will always appear consecutively.
Use two pointers (i and j):
i tracks the position where the next unique element should be placed.
j traverses the array to find unique elements.
When a unique element is found, it is placed at the position i + 1, effectively overwriting the duplicate values in the array.
Key Insight:

The array's unique elements will remain in their original order since only duplicates are skipped.
Complexity:
Time Complexity: 
ùëÇ(ùëõ)
O(n), where n is the size of the array, as each element is processed once.
Space Complexity: 
ùëÇ(1)
O(1), as the operation is performed in-place without using extra space.
Edge Cases:

Empty array (nums.size() == 0): Return 0 as there are no elements.
Array with all unique elements: The array remains unchanged, and its length is returned.
Array with all identical elements: The length is 1, and the array is reduced to one element.

Algorithm Explanation
Input:

Accept a reference to a vector nums containing the sorted array.
Initialization:

Declare two pointers:
i: Tracks the position of the last unique element.
j: Starts from the second element to traverse the array.
Handle the edge case of an empty array by returning 0 immediately.
Traversal:

Iterate through the array using j:
Compare the current element (nums[j]) with the last unique element (nums[i]).
If they are different:
Increment i to move to the next position for a unique element.
Copy the current element (nums[j]) to nums[i].
Return Result:

The value of i + 1 represents the number of unique elements, as i is zero-based.
